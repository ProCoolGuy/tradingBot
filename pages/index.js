import Head from 'next/head'
import styles from '../styles/Home.module.css'
import React, { useEffect, useState } from 'react';
import { Box } from '@mui/material';
import { DataGrid } from '@mui/x-data-grid';
import axios from 'axios';

const state = ['Created', 'Bought', 'End'];
const columns = [
  { field: 'id', headerName: 'No', flex: 0.5 },
  { 
    field: 'symbol', 
    headerName: 'Symbol', 
    flex: 1, 
    cellClassName: (params) => {
      // console.log(params.row);
      if (params.row.isNew) return 'newData';
      return ''
    }
  },
  { 
    field: '5min', 
    headerName: '5min', 
    flex: 1,
    cellClassName: (params) => {
      if (params.value < 0) return 'super-app negative';
      if (params.value > 0) return 'super-app positive';
      return ''
    },
    valueFormatter: (params) => {
      return !params.value ? '-' : params.value.toFixed(2);
    }
  },
  { 
    field: '1hr', 
    headerName: '1hour', 
    flex: 1,
    cellClassName: (params) => {
      if (params.value < 0) return 'super-app negative';
      if (params.value > 0) return 'super-app positive';
      return ''
    },
    valueFormatter: (params) => {
      return !params.value ? '-' : params.value.toFixed(2);
    }
  },
  { 
    field: '12hr', 
    headerName: '12hour', 
    flex: 1,
    cellClassName: (params) => {
      if (params.value < 0) return 'super-app negative';
      if (params.value > 0) return 'super-app positive';
      return ''
    },
    valueFormatter: (params) => {
      return !params.value ? '-' : params.value.toFixed(2);
    }
  },
  { 
    field: 'age', 
    headerName: 'Age', 
    flex: 1, 
    valueFormatter: (params) => {
      return (params.value || '') + ' mins';
    }
   },
  {
    field: 'state',
    headerName: 'State',
    flex: 1,
    valueFormatter: (params) => {
      return state[params.value];
    }
  },
];

export default function Home() {
  const [rows, setRows] = useState([]);
  const [per, setPer] = useState(0);
  const [amount, setAmount] = useState(0);
  let flag;
  const fetchData = async () => {
    try {
      const response = await axios.get('http://192.168.112.79:3000/getData');
      const data = response.data || [];
      data.forEach(row => row.isNew = true);
      const oldResponse = await axios.get('http://192.168.112.79:3000/getOldTrade');
      const oldData = oldResponse.data || [];
      
      const tokens = [];
      let id = 1;
      for (const token of data.concat(oldData)) {
        if (token === 'error') continue;
        tokens.push({
          id,
          isNew: token.isNew,
          symbol: token.symbol,
          state: token.state,
          age: parseInt(token.age / 60),
          ...token.priceChange
        })
        id++;
      }

      setRows(tokens);
    } catch (error) {
      console.log(error);
    }
  }

  const getSetting = async () => {
    try {
      let response = await axios.get('http://192.168.112.79:3000/getPer');
      const per = response.data;      
      setPer(per);
      response = await axios.get('http://192.168.112.79:3000/getAmount');
      const amount = response.data;
      setAmount(amount);
    } catch (error) {
      console.log(error);
    }
  }

  useEffect(() => {
    if (flag) return;
    flag = true;
    fetchData();
    setInterval(fetchData, 60 * 1000);
    getSetting();
  }, []);

  const handleClickSetPer = async () => {
    try {
      await axios.get('http://192.168.112.79:3000/setPer?per=' + per);
      
    } catch (error) {
      console.log(error);
    }
  }

  const handleClickSetAmount = async () => {
    try {
      await axios.get('http://192.168.112.79:3000/setAmount?amount=' + amount);

    } catch (error) {
      console.log(error);
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div style={{ display: 'flex', justifyContent: 'space-evenly', width: '100%', marginBottom: '30px' }}>
          <div>
            sell <input type='number' value={per} onChange={(e) => setPer(e.target.value)} /> %
            <input type='button' value='Set' onClick={handleClickSetPer} />
          </div>
          <div>
            buy/sell Amount <input type='number' value={amount} onChange={(e) => setAmount(e.target.value)} /> $
            <input type='button' value='Set' onClick={handleClickSetAmount} />
          </div>
        </div>
        <Box sx={{
          width: '100%',
          '& .MuiDataGrid-columnHeadersInner': {
            backgroundColor: 'rgb(217, 217, 217)',
          },
          '& .super-app.negative': {
            color: 'red',
            
          },
          '& .super-app.positive': {
            color: 'green',
          },
          '& .newData': {
            color: 'blue',
          },
        }}>
          <DataGrid autoHeight rows={rows} columns={columns} />
        </Box>
      </main>
    </div>
  )
}
